{"version":3,"sources":["pages/tensorflow mileage/tensorflow.mileage.function.js","pages/homepage/homepage.jsx","components/spinner/spinner.component.jsx","pages/tensorflow mileage/tensorflow.mileage.jsx","pages/tensorflow handwriting/tensorflow.handwriting.jsx","pages/tensorflow baseball/tensorflow.baseball.jsx","App.js","index.js"],"names":["data","model","tensorData","inputs","labels","Homepage","className","to","Spinner","prepareTheModel","a","getData","createModel","convertToTensor","trainModel","makePrediction","userInput","inputMin","inputMax","labelMin","labelMax","num","dataSync","predict","tf","mul","sub","add","toFixed","fetch","carsDataResponse","json","carsData","cleaned","map","car","mpg","Miles_per_Gallon","horsepower","Horsepower","filter","dense","inputShape","units","useBias","activation","shuffle","d","inputTensor","length","labelTensor","max","min","div","compile","optimizer","adam","loss","meanSquaredError","metrics","fit","batchSize","epochs","TensorflowMileage","handleSubmit","event","preventDefault","setState","answer","state","number","handleChange","target","name","value","loading","this","onSubmit","type","placeholder","onChange","React","Component","TensorflowHandwriting","classname","TensorflowBaseball","App","fallback","exact","path","component","ReactDOM","render","StrictMode","basename","process","document","getElementById"],"mappings":"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","file":"static/js/main.966ae265.chunk.js","sourcesContent":["import * as tf from '@tensorflow/tfjs';\r\n\r\nvar data;\r\nvar model;\r\nvar tensorData;\r\nvar inputs;\r\nvar labels;\r\n\r\nexport async function prepareTheModel() {\r\n    // Load and plot the original input data that we are going to train on.\r\n    data = await getData();\r\n\r\n    // Create the model\r\n    model = createModel();\r\n\r\n    // Convert the data to a form we can use for training.\r\n    tensorData = convertToTensor(data);\r\n    inputs = tensorData.inputs;\r\n    labels = tensorData.labels;\r\n\r\n    // Train the model\r\n    await trainModel(model, inputs, labels);\r\n}\r\n\r\n// Function to help user make predictions on custom data\r\nexport function makePrediction(userInput) {\r\n    var { inputMin, inputMax, labelMin, labelMax } = tensorData;\r\n\r\n    if(userInput < 20 || userInput > 400) \r\n        return 0;\r\n\r\n    const num = (userInput - inputMin.dataSync()) / (inputMax.dataSync() - inputMin.dataSync());\r\n\r\n    const preds = model.predict(tf.tensor2d([num], [1, 1]));\r\n\r\n    const unNormPreds = preds.mul(labelMax.sub(labelMin)).add(labelMin);\r\n\r\n    return unNormPreds.dataSync()[0].toFixed(2);\r\n}\r\n\r\n// 1. LOAD, FORMAT AND VISUALISE THE INPUT DATA\r\n// Get the car data reduced to just the variables we are interested and cleaned of missing data.\r\nasync function getData() {\r\n    const carsDataResponse = await fetch('https://storage.googleapis.com/tfjs-tutorials/carsData.json');\r\n    const carsData = await carsDataResponse.json();\r\n    const cleaned = carsData.map(car => ({\r\n        mpg: car.Miles_per_Gallon,\r\n        horsepower: car.Horsepower,\r\n    }))\r\n    .filter(car => (car.mpg != null && car.horsepower != null));\r\n    \r\n    return cleaned;\r\n}\r\n\r\n// 2. DEFINE THE MODEL ARCHITECTURE\r\nfunction createModel() {\r\n    // Create a sequential model\r\n    const model = tf.sequential();\r\n\r\n    // Add a single input layer\r\n    model.add(tf.layers.dense({inputShape: [1], units: 64, useBias: true}));\r\n\r\n    model.add(tf.layers.dense({units: 32, activation: 'sigmoid'}));\r\n    model.add(tf.layers.dense({units: 32, activation: 'sigmoid'}));\r\n\r\n    // Add an output layer\r\n    model.add(tf.layers.dense({units: 1, useBias: true}));\r\n\r\n    return model;\r\n} \r\n\r\n// 3. PREPARE THE DATA FOR TRAINING\r\n/**\r\n * Convert the input data to tensors that we can use for machine\r\n * learning. We will also do the important best practices of _shuffling_\r\n * the data and _normalizing_ the data\r\n * MPG on the y-axis.\r\n */\r\nfunction convertToTensor(data) {\r\n    // Wrapping these calculations in a tidy will dispose any\r\n    // intermediate tensors.\r\n\r\n    return tf.tidy(() => {\r\n        // Step 1. Shuffle the data\r\n        tf.util.shuffle(data);\r\n    \r\n        // Step 2. Convert data to Tensor\r\n        const inputs = data.map(d => d.horsepower)\r\n        const labels = data.map(d => d.mpg);\r\n    \r\n        const inputTensor = tf.tensor2d(inputs, [inputs.length, 1]);\r\n        const labelTensor = tf.tensor2d(labels, [labels.length, 1]);\r\n    \r\n        //Step 3. Normalize the data to the range 0 - 1 using min-max scaling\r\n        const inputMax = inputTensor.max();\r\n        const inputMin = inputTensor.min();\r\n        const labelMax = labelTensor.max();\r\n        const labelMin = labelTensor.min();\r\n    \r\n        const normalizedInputs = inputTensor.sub(inputMin).div(inputMax.sub(inputMin));\r\n        const normalizedLabels = labelTensor.sub(labelMin).div(labelMax.sub(labelMin));\r\n    \r\n        return {\r\n            inputs: normalizedInputs,\r\n            labels: normalizedLabels,\r\n            // Return the min/max bounds so we can use them later.\r\n            inputMax,\r\n            inputMin,\r\n            labelMax,\r\n            labelMin,\r\n        }\r\n    });\r\n}\r\n\r\n// 4. TRAIN THE MODEL\r\nasync function trainModel(model, inputs, labels) {\r\n    // Prepare the model for training.\r\n    model.compile({\r\n        optimizer: tf.train.adam(),\r\n        loss: tf.losses.meanSquaredError,\r\n        metrics: ['mse'],\r\n    });\r\n    \r\n    const batchSize = 64;\r\n    const epochs = 100;\r\n    \r\n    return await model.fit(inputs, labels, {\r\n        batchSize,\r\n        epochs,\r\n        shuffle: true,\r\n    });\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport './homepage.styles.scss';\r\n\r\nconst Homepage = () => (\r\n    <div className=\"homepage\">\r\n        <Link className=\"sections selectSections\" to=\"/mileage\">\r\n            <h1 className=\"name\">Mileage Predictor</h1>\r\n        </Link>\r\n        <Link className=\"sections selectSections\" to=\"/handwriting\">\r\n            <h1 className=\"name\">Handwriting Predictor</h1>\r\n        </Link>\r\n        <Link className=\"sections\" to=\"/baseball\">\r\n            <h1 className=\"name\">Baseball Pitch Predictor</h1>\r\n        </Link>\r\n    </div>\r\n);\r\n\r\nexport default Homepage;","import React from \"react\";\r\n\r\nimport \"./spinner.styles.scss\";\r\n\r\nconst Spinner = () => (\r\n  <div className=\"spinner-overlay\">\r\n    <h1 className=\"heading\">The model is getting trained</h1>\r\n    <div className=\"spinner-container\" />\r\n  </div>\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nimport { makePrediction, prepareTheModel } from './tensorflow.mileage.function';\r\nimport Spinner from '../../components/spinner/spinner.component';\r\n\r\nimport './tensorflow.mileage.styles.scss';\r\n\r\nclass TensorflowMileage extends React.Component {    \r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      loading: true,\r\n      number: null,\r\n      answer: 0\r\n    }\r\n  }\r\n\r\n  async componentDidMount() {\r\n    await prepareTheModel();\r\n\r\n    this.setState({ loading: false });\r\n  }\r\n\r\n  handleSubmit = async (event) => {\r\n    await event.preventDefault();\r\n\r\n    this.setState({ answer: makePrediction(this.state.number) });\r\n  }\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.target;\r\n\r\n    this.setState({ [name]: value });\r\n  }\r\n\r\n  render() {\r\n    if(this.state.loading) {\r\n      return <Spinner />\r\n    }\r\n\r\n    return (\r\n      <div className='tensorflowmileage'>\r\n          <h1>Predict Miles Per Gallon From Horsepower</h1>\r\n          <form className=\"form\" onSubmit={this.handleSubmit}>\r\n            <input className=\"input\" name=\"number\" type=\"number\" placeholder=\"Horsepower\" value={this.state.number} onChange={this.handleChange} />\r\n            <button className=\"button\" type=\"submit\">Enter</button>\r\n          </form>\r\n          <h1 className=\"prediction\">Miles per Gallon: {this.state.answer}</h1>\r\n      </div>\r\n    )\r\n  }\r\n};\r\n\r\nexport default TensorflowMileage;","import React from 'react';\r\n\r\nimport './tensorflow.handwriting.styles.scss';\r\n\r\nconst TensorflowHandwriting = () => (\r\n    <div classname=\"tensorflowhandwriting\">\r\n        <h1>Tensorflow Handwriting</h1>\r\n    </div>\r\n);\r\n\r\nexport default TensorflowHandwriting;","import React from 'react';\r\n\r\nimport './tensorflow.baseball.styles.scss';\r\n\r\nconst TensorflowBaseball = () => (\r\n    <div classname=\"tensorflowhandwriting\">\r\n        <h1>Tensorflow Baseball Pitch</h1>\r\n    </div>\r\n);\r\n\r\nexport default TensorflowBaseball;","import React, { Suspense } from 'react';\nimport { Switch, Route } from 'react-router-dom';\n\nimport Homepage from './pages/homepage/homepage.jsx';\nimport Spinner from './components/spinner/spinner.component.jsx';\nimport TensorflowMileage from './pages/tensorflow mileage/tensorflow.mileage.jsx';\nimport TensorflowHandwriting from './pages/tensorflow handwriting/tensorflow.handwriting.jsx';\nimport TensorflowBaseball from './pages/tensorflow baseball/tensorflow.baseball.jsx';\n\nimport './App.scss';\n\nconst App = () => (\n  <div className=\"App\">\n    <Switch>\n      <Suspense fallback={<Spinner />}>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route path=\"/mileage\" component={TensorflowMileage} />\n        <Route path=\"/handwriting\" component={TensorflowHandwriting} />\n        <Route path=\"/baseball\" component={TensorflowBaseball} />\n      </Suspense>\n    </Switch>\n  </div>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}